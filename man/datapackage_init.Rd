% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/datapackage_init.R
\name{datapackage_init}
\alias{datapackage_init}
\title{Initialise a data package from a data frame, metadata list, and source code
file used to create the data set.}
\usage{
datapackage_init(df, package_name, meta = NULL, source_cleaner = NULL, ...)
}
\arguments{
\item{df}{The data frame object name of the data frame you would like to
convert into a data package.}

\item{package_name}{character string name for the data package. Unnecessary
if the \code{name} field is specified in \code{meta}.}

\item{meta}{The list object with the data frame's meta data. The list
item names must conform to the Open Knowledge Foundation's Data Package
Protocol (see \url{http://dataprotocols.org/data-packages/}). \code{dpmr}
uses \code{jsonlite} to convert the list into a JSON file. If
\code{meta = NULL} then a barebones \code{datapackage.json} file will be
created. If \code{resources} is not specified then this will be automatically
generated.}

\item{source_cleaner}{a character string or vector of file paths pointing to
the source code file used to gather and clean the \code{df} data frame. Can
be in R or any other language, e.g. Python. Following Data Package convention
the scripts are renamed \code{process*.*}. You can also
\code{source_cleaner} is not required, but HIGHLY RECOMMENDED.}

\item{...}{arguments to pass to methods.}
}
\description{
Initialise a data package from a data frame, metadata list, and source code
file used to create the data set.
}
\examples{
\dontrun{
# Create dummy data
A <- B <- C <- sample(1:20, size = 20, replace = TRUE)
ID <- sort(rep('a', 20))
Data <- data.frame(ID, A, B, C)

# Initialise data package
datapackage_init(df = Data, package_name = 'My_Data_Package')
}
}

